package com.company;

public class SudokuSolutionGenerator4 {
    public int matrix[][];
    PermutationGenerator pg;

    SudokuSolutionGenerator4() {
        this.matrix = new int[4][4];
        pg = new PermutationGenerator();
    }

    public void placePermutation() {
        pg.generate4();
        for (int i = 0; i < pg.permutation.length; i++) {    //Zde se zapise permutace do prvniho radku 2D pole
            this.matrix[0][i] = pg.permutation[i];
        }
    }

    private void copyArraySegment(int resourceRow, int resourceStart, int resultRow, int resultStart, int segmentLength) { //Tato funkce kopiruje casti permutace a vlozi zkopirovanou cast na nove misto
        for (int i = 0; i < segmentLength; i++) {                                                                          //resourceStart = pocatecni sloupec
            this.matrix[resultRow][resultStart + i] = this.matrix[resourceRow][resourceStart + i];                         //resourceRow = pocatecni radek
        }                                                                                                                  //resultStart = sloupec do ktereho se vlozi zkopirovana cast permutace
    }                                                                                                                      //resultRow = radek do ktereho se vlozi zkopirovana cast permutace

    private void rowPermutation(int resourceRow, int resultRow) {
        copyArraySegment(resourceRow, 0, resultRow, 2, 2); //Tato funkce rovna za sebou v urcitem poradi zkopirovane casti permutace a pak je vklada na urcity radek
        copyArraySegment(resourceRow, 2, resultRow, 0, 2); //Napriklad: 1 2 3 4 5 6 7 8 9
                                                                                            //           4 5 6 7 8 9 1 2 3 atd.
    }

    private void movePermutation(int resourceRow, int resultRow) { //Tato funkce presune permutaci krome jejiho prvniho cisla z pocatecniho radku (resourceRow) na jiny radek (resultRow) a potom dosadi prvni cislo na posledni pozici v radku
        for (int i = 0; i < matrix[resultRow].length - 1; i++) {    //Priklad:  1 2 3 4 5 6 7 8 9
            matrix[resultRow][i] = matrix[resourceRow][i + 1];     //          2 3 4 5 6 7 8 9 1
        }                                                          //          3 4 5 6 7 8 9 1 2 atd.
        matrix[resultRow][3] = matrix[resourceRow][0];
    }

    public void generate4() {
        placePermutation();
        rowPermutation(0, 1);       //Touto funkci vygenerujeme vyresene sudoku tim ze s pomoci predchozich funkci prepiseme a presuneme permutaci
        movePermutation(0, 2);
        rowPermutation(2, 3);
    }

    public void print() {
        for (int i = 0; i < matrix.length; i++) {            //Zde se vytiskne cele 2D pole
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(this.matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}
